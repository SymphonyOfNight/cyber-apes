<?xml version="1.0" encoding="UTF-8"?>
<!--日志级别以及优先级排序: OFF > FATAL > ERROR > WARN > INFO > DEBUG > TRACE > ALL -->
<!--Configuration后面的status，这个用于设置log4j2自身内部的信息输出，可以不设置，当设置成trace时，你会看到log4j2内部各种详细输出-->
<!--monitorInterval：Log4j能够自动检测修改配置 文件和重新配置本身，设置间隔秒数-->
<configuration status="WARN" monitorInterval="30">
    <!-- 全局参数 -->
    <Properties>
        <Property name="LOG_HOME" value="logs/"/>
        <Property name="LOG_NAME" value="$${date:yyyy-MM}/%d{yyyy-MM-dd}-%i.log"/>
    </Properties>

    <!--先定义所有的appender-->
    <Appenders>
        <!--这个输出控制台的配置-->
        <Console name="ConsoleLog" target="SYSTEM_OUT">
            <!--输出日志的格式-->
            <!--%m 输出代码中指定的消息
                %p 输出优先级，即DEBUG,INFO,WARN,ERROR,FATAL
                %r 输出自应用启动到输出该log信息耗费的毫秒数
                %c 输出所属的类目,通常就是所在类的全名
                %t 输出产生该日志事件的线程名
                %n 输出一个回车换行符，Windows平台为“\r\n”，Unix平台为“\n”
                %d 输出日志时间点的日期或时间，默认格式为ISO8601，也可以在其后指定格式 如：%d{dd MMM yyyy HH:mm:ss,SSS}，输出类似：02 Nov 2012 14:34:02,781
                %l 输出日志事件的发生位置，包括类目名、发生的线程，以及在代码中的行数 如：Testlog.main(TestLog.java:10)
                %F 输出日志消息产生时所在的文件名称
                %L 输出代码中的行号
                %x 输出和当前线程相关联的NDC(嵌套诊断环境),像java servlets多客户多线程的应用中
                %% 输出一个"%"字符-->
            <PatternLayout pattern="[%d{HH:mm:ss:SSS}] [%p] - %l - %m%n"/>
        </Console>

        <!-- 这个会打印出所有的info及以级别的信息，每次大小超过size，则这size大小的日志会自动存入按年份-月份建立的文件夹下面并进行压缩，作为存档-->
        <RollingFile name="Logger" fileName="${sys:user.home}/logs/info.log"
                     filePattern="${sys:user.home}/logs/$${date:yyyy-MM}/%d{yyyy-MM-dd}-%i.log">
            <!--控制台只输出level及以上级别的信息（onMatch），其他的直接拒绝（onMismatch）-->
            <ThresholdFilter level="${logging.level}" onMatch="ACCEPT" onMismatch="DENY"/>
            <PatternLayout pattern="[%d{HH:mm:ss:SSS}] [%p] - %l - %m%n"/>
            <Policies>
                <TimeBasedTriggeringPolicy/>
                <SizeBasedTriggeringPolicy size="100 MB"/>
            </Policies>
        </RollingFile>
    </Appenders>

    <!--然后定义logger，只有定义了logger并引入的appender，appender才会生效-->
    <Loggers>
        <!--过滤掉spring和mybatis的一些无用的DEBUG信息-->
        <Logger name="org.springframework" level="INFO"></Logger>
        <Logger name="org.mybatis" level="INFO"></Logger>

        <Root level="${logging.level}">
            <AppenderRef ref="ConsoleLog"/>
            <AppenderRef ref="Logger"/>
        </Root>
    </Loggers>
</configuration>